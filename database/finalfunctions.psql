CREATE OR REPLACE FUNCTION site_schema.create_site_view(site_id_arg INTEGER, site_name_arg TEXT)
RETURNS VOID AS $$
DECLARE
    sanitized_site_name TEXT;
    view_name TEXT;
    dynamic_sql TEXT;
BEGIN
    -- Replace spaces with underscores and lower case the site name for the view name
    sanitized_site_name := REPLACE(LOWER(site_name_arg), ' ', '_');

    -- Construct the view name dynamically using the site ID and sanitized site name
    view_name := 'site_' || site_id_arg || '_' || sanitized_site_name || '_summary';

    -- Construct the dynamic SQL for creating the view
    dynamic_sql := format($f$ CREATE VIEW site_schema.%I AS
        SELECT
            s.site_id,
            s.site_name,
            DATE_TRUNC('week', sub.created_date) AS report_week,
            DATE_TRUNC('month', sub.created_date) AS report_month,
            DATE_TRUNC('day', sub.created_date) AS report_day,
            EXTRACT(YEAR FROM sub.created_date) AS report_year,
            COUNT(DISTINCT CASE WHEN sub.form_id = 1 THEN sub.submission_id END) + 
            COUNT(DISTINCT CASE WHEN sub.form_id = 3 AND ans.question_id = 18 AND ans.question_option_id = 36 THEN sub.submission_id END) AS total_visits,
            COUNT(DISTINCT CASE WHEN sub.form_id = 1 THEN sub.submission_id END) AS total_consumption,
           
			-- Age demographics
			COUNT(CASE  WHEN sub.form_id = 1 AND  ans.question_id = 2 AND EXTRACT(YEAR FROM AGE(CAST(ans.answer_date AS DATE))) < 20 THEN 1 END) AS under_20,
			COUNT(CASE  WHEN sub.form_id = 1 AND  ans.question_id = 2 AND EXTRACT(YEAR FROM AGE(CAST(ans.answer_date AS DATE))) BETWEEN 20 AND 29 THEN 1 END) AS age_20_29,
			COUNT(CASE  WHEN sub.form_id = 1 AND  ans.question_id = 2 AND EXTRACT(YEAR FROM AGE(CAST(ans.answer_date AS DATE))) BETWEEN 30 AND 39 THEN 1 END) AS age_30_39,
			COUNT(CASE  WHEN sub.form_id = 1 AND  ans.question_id = 2 AND EXTRACT(YEAR FROM AGE(CAST(ans.answer_date AS DATE))) BETWEEN 40 AND 49 THEN 1 END) AS age_40_49,
			COUNT(CASE  WHEN sub.form_id = 1 AND  ans.question_id = 2 AND EXTRACT(YEAR FROM AGE(CAST(ans.answer_date AS DATE))) BETWEEN 50 AND 59 THEN 1  END) AS age_50_59,
			COUNT(CASE  WHEN sub.form_id = 1 AND  ans.question_id = 2 AND EXTRACT(YEAR FROM AGE(CAST(ans.answer_date AS DATE))) >= 60 THEN 1  END) AS over_60,
			COUNT(CASE  WHEN sub.form_id = 1 AND  ans.question_id = 2 AND (ans.answer_date IS NULL OR ans.answer_date = '') THEN 1 END) AS age_unknown

			-- Client demographics based on question_option_id
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 3 AND ans.question_option_id = 1 THEN sub.submission_id END) AS Male_clients,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 3 AND ans.question_option_id = 2 THEN sub.submission_id END) AS Female_clients,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 3 AND ans.question_option_id = 3 THEN sub.submission_id END) AS Other_clients,

			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND ans.question_id = 4 AND ans.answer_boolean = TRUE  THEN sub.submission_id  END) AS new_clients,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND ans.question_id = 4 AND ans.answer_boolean = FALSE THEN sub.submission_id  END) AS unique_clients,

			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 4 THEN sub.submission_id END) AS cocaine_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 5 THEN sub.submission_id END) AS crack_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 6 THEN sub.submission_id END) AS methamphetamine_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 7 THEN sub.submission_id END) AS amphetamine_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 8 THEN sub.submission_id END) AS heroin_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 9 THEN sub.submission_id END) AS fentanyl_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 10 THEN sub.submission_id END) AS oxycontin_oxycodone_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 11 THEN sub.submission_id END) AS morphine_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 12 THEN sub.submission_id END) AS hydromorphone_dilaudid_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 13 THEN sub.submission_id END) AS unspecified_opioid_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 14 THEN sub.submission_id END) AS speedball_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 15 THEN sub.submission_id END) AS other_substances_usage,
			COUNT(DISTINCT CASE WHEN sub.form_id = 1 AND  ans.question_id = 6 AND ans.question_option_id = 16 THEN sub.submission_id END) AS unknown_not_specified_substance_usage,



			-- Count of non-fatal overdoses
			COUNT(DISTINCT CASE WHEN sub.form_id = 2 AND  ans.question_id = 10 AND ans.question_option_id = 17 THEN sub.submission_id END) AS non_fatal_overdoses,
			-- Count of fatal overdoses
			COUNT(DISTINCT CASE WHEN sub.form_id = 2 AND  ans.question_id = 10 AND ans.question_option_id = 18 THEN sub.submission_id END) AS fatal_overdoses,
			-- Count of other medical emergencies
			COUNT(DISTINCT CASE WHEN sub.form_id = 2 AND  ans.question_id = 10 AND ans.question_option_id = 19 THEN sub.submission_id END) AS other_medical_emergencies,
			-- Count of law enforcement calls
			COUNT(DISTINCT CASE WHEN sub.form_id = 2 AND  ans.question_id = 10 AND ans.question_option_id =20 THEN sub.submission_id END) AS law_enforcement_calls,
			-- Count of incidents where naloxone was administered
			COUNT(DISTINCT CASE WHEN sub.form_id = 2 AND  ans.question_id = 11 AND ans.answer_boolean = TRUE THEN sub.submission_id END) AS naloxone_administered,
			-- Count of incidents where EMS was called
			COUNT(DISTINCT CASE WHEN sub.form_id = 2 AND  ans.question_id = 12 AND ans.answer_boolean = TRUE THEN sub.submission_id END) AS ems_called

			COUNT(DISTINCT CASE WHEN sub.form_id = 3 THEN sub.submission_id END) AS total_consumption, total_referrals


			-- Counting null answers for each submission
			SUM(CASE WHEN ans.question_option_id IS NULL AND ans.answer_text IS NULL AND ans.answer_date IS NULL AND ans.answer_boolean IS NULL THEN 1 ELSE 0 END) AS null_answers_count,

			-- Total questions per form (assuming a fixed number of questions per form for simplicity)
			SUM(CASE WHEN sub.form_id = 1 THEN 10 WHEN sub.form_id = 2 THEN 8 WHEN sub.form_id = 3 THEN 6 END) AS total_questions_per_submission,

			-- Proportion of unanswered questions
			AVG(CASE
				WHEN qt.type_name = 'Text' AND ans.answer_text IS NOT NULL THEN 0
				WHEN qt.type_name = 'Date' AND ans.answer_date IS NOT NULL THEN 0
				WHEN qt.type_name = 'Boolean' AND ans.answer_boolean IS NOT NULL THEN 0
				WHEN qt.type_name IN ('Dropdown', 'Radio Button', 'Checkbox') AND ans.question_option_id IS NOT NULL THEN 0
				ELSE 1
			END) * 100 AS percentage_unanswered

			-- Substance usage among new and unique clients
			COUNT(DISTINCT CASE WHEN ans_new_clients.answer_boolean = TRUE AND ans_drugs.question_id = 6 THEN sub.submission_id END) AS drug_usage_new_clients,
			COUNT(DISTINCT CASE WHEN ans_new_clients.answer_boolean = FALSE AND ans_drugs.question_id = 6 THEN sub.submission_id END) AS drug_usage_unique_clients,

			-- Correlation between interventions and incidents
			COUNT(DISTINCT CASE WHEN ans_naloxone.answer_boolean = TRUE THEN sub.submission_id END) AS naloxone_interventions,
			COUNT(DISTINCT CASE WHEN ans_ems.answer_boolean = TRUE THEN sub.submission_id END) AS ems_interventions,
			COUNT(DISTINCT CASE WHEN ans_incidents.question_id = 10 THEN sub.submission_id END) AS total_incidents,

			-- Patterns in visits, substance use, and referrals
			COUNT(DISTINCT sub.submission_id) AS total_visits_pattern,
			COUNT(DISTINCT CASE WHEN ans_drugs.question_id = 6 THEN sub.submission_id END) AS total_substance_use_cases,
			COUNT(DISTINCT CASE WHEN sub.form_id = 3 THEN sub.submission_id END) AS total_referrals_pattern,

			-- Variation in substance use across demographic groups
			COUNT(DISTINCT CASE WHEN ans_gender.question_id = 3 AND ans_gender.answer_text = 'Male' AND ans_drugs.question_id = 6 THEN sub.submission_id END) AS male_substance_use,
			COUNT(DISTINCT CASE WHEN ans_gender.question_id = 3 AND ans_gender.answer_text = 'Female' AND ans_drugs.question_id = 6 THEN sub.submission_id END) AS female_substance_use,
			COUNT(DISTINCT CASE WHEN ans_gender.question_id = 3 AND ans_gender.answer_text = 'Other' AND ans_drugs.question_id = 6 THEN sub.submission_id END) AS other_gender_substance_use
        FROM
            site_schema.submissions sub
        JOIN
            site_schema.sc_sites s ON sub.site_id = s.site_id
        LEFT JOIN
            site_schema.answers ans ON sub.submission_id = ans.submission_id
        WHERE
            sub.site_id = %L
        GROUP BY
            s.site_id, s.site_name, report_week, report_month, report_day
		ORDER BY
            report_week, report_month, report_day

 	$f$, view_name, site_id_arg);

    -- Execute the dynamic SQL statement to create the view
    EXECUTE dynamic_sql;
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE FUNCTION site_schema.generate_staff_for_sites()
RETURNS VOID AS $$
DECLARE
    site_ids INTEGER[];
    role_ids INTEGER[] := '{1, 2, 4, 5}'; -- Role IDs for Site Admin, Data Collector, HC Admin, and HC Viewer
    admin_role_id INTEGER := 1; -- Site Admin role ID
    data_collector_role_id INTEGER := 2; -- Data Collector role ID
    hc_admin_role_id INTEGER := 4; -- HC Admin role ID
    hc_viewer_role_id INTEGER := 5; -- HC Viewer role ID
    admin_count INTEGER := 0; -- Counter for Site Admins
    data_collector_count INTEGER := 0; -- Counter for Data Collectors
    i INTEGER;
    j INTEGER;
    username TEXT;
    first_names TEXT[] := ARRAY['John', 'Jane', 'Michael', 'Emily', 'David', 'Sarah'];
    last_names TEXT[] := ARRAY['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Garcia'];
    passwords TEXT[] := ARRAY['password123', 'admin@123', 'securepwd', 'letmein', 'changeme', 'P@ssw0rd'];
    email_domain TEXT := '@example.com';
BEGIN
    SELECT ARRAY(SELECT site_id FROM site_schema.sc_sites) INTO site_ids;

    IF site_ids IS NOT NULL THEN
        FOR i IN 1..array_length(site_ids, 1) LOOP
            -- Generate Site Admin
            IF admin_count < 1 THEN
                admin_count := admin_count + 1;
                username := first_names[(random() * (array_length(first_names, 1) - 1) + 1)::INTEGER] || '_' || last_names[(random() * (array_length(last_names, 1) - 1) + 1)::INTEGER] || '_role' || admin_role_id || '_' || substring(md5(random()::text), 1, 8);
                INSERT INTO site_schema.staffs (username, email, password_hash, role_id, site_id)
                VALUES
                    (username, 
                    username || email_domain,
                    md5(passwords[(random() * (array_length(passwords, 1) - 1) + 1)::INTEGER] || (random() * 1000)::TEXT), 
                    admin_role_id, 
                    site_ids[i]);
            END IF;
 			-- Generate Data Collectors 
            FOR j IN 1..2 LOOP --two staff per site
                username := first_names[(random() * (array_length(first_names, 1) - 1) + 1)::INTEGER] || '_' || last_names[(random() * (array_length(last_names, 1) - 1) + 1)::INTEGER] || '_role' || data_collector_role_id || '_' || substring(md5(random()::text), 1, 8);
                INSERT INTO site_schema.staffs (username, email, password_hash, role_id, site_id) VALUES
                    (username, 
                    username || email_domain,
                    md5(passwords[(random() * (array_length(passwords, 1) - 1) + 1)::INTEGER] || (random() * 1000)::TEXT), 
                    data_collector_role_id, 
                    site_ids[i]);
            END LOOP;
			-- Generate HC Admin and HC Viewer for each site
            username := first_names[(random() * (array_length(first_names, 1) - 1) + 1)::INTEGER] || '_' || last_names[(random() * (array_length(last_names, 1) - 1) + 1)::INTEGER] || '_role' || hc_admin_role_id || '_' || substring(md5(random()::text), 1, 8);
            INSERT INTO site_schema.staffs (username, email, password_hash, role_id, site_id) VALUES
                (username, 
                username || email_domain,
                md5(passwords[(random() * (array_length(passwords, 1) - 1) + 1)::INTEGER] || (random() * 1000)::TEXT), 
                hc_admin_role_id, 
                site_ids[i]);

            username := first_names[(random() * (array_length(first_names, 1) - 1) + 1)::INTEGER] || '_' || last_names[(random() * (array_length(last_names, 1) - 1) + 1)::INTEGER] || '_role' || hc_viewer_role_id || '_' || substring(md5(random()::text), 1, 8);
            INSERT INTO site_schema.staffs (username, email, password_hash, role_id, site_id) VALUES
                (username, 
                username || email_domain,
                md5(passwords[(random() * (array_length(passwords, 1) - 1) + 1)::INTEGER] || (random() * 1000)::TEXT), 
                hc_viewer_role_id, 
                site_ids[i]);
           
    
        END LOOP;
    END IF;
END;
$$ LANGUAGE plpgsql;

SELECT site_schema.generate_staff_for_sites();




Generate 
CREATE OR REPLACE FUNCTION site_schema.generate_staff_email_password(
    role_id_input INTEGER,
    site_id_input INTEGER DEFAULT NULL
)
RETURNS VOID AS $$
DECLARE
    staff_record RECORD;
    new_email TEXT;
    new_password TEXT;
    email_domain TEXT := '@example.com';
    password_characters TEXT := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    password_length INT := 5; -- You can adjust the length of the password
BEGIN
    FOR staff_record IN
        SELECT s.*, r.role_name
        FROM site_schema.staffs s
        JOIN site_schema.roles r ON s.role_id = r.role_id
        WHERE (s.site_id = site_id_input OR site_id_input IS NULL)
          AND s.role_id = role_id_input
    LOOP
        -- Generate new email incorporating the role
        new_email := 'staff_' || staff_record.role_name || '_' || staff_record.staff_id || email_domain;

        -- Generate new password
        new_password := '';
        FOR i IN 1..password_length LOOP
            new_password := new_password || substr(password_characters, (random() * (length(password_characters) - 1) + 1)::INTEGER, 1);
        END LOOP;
        new_password := md5(new_password); -- Hash the password, consider using a more secure hashing mechanism

        -- Update staff record with new email and password hash
        UPDATE site_schema.staffs
        SET email = new_email, password_hash = new_password
        WHERE staff_id = staff_record.staff_id;
    END LOOP;
END;
$$ LANGUAGE plpgsql;


-- Step 1: Create a temporary sequence
CREATE TEMP SEQUENCE temp_seq START 1;

-- Step 2: Update the table using the sequence
UPDATE site_schema.staffs
SET site_id = nextval('temp_seq')
WHERE role_id = 1; -- This condition ensures only rows with site_id 1 and above are updated

-- Step 3: Drop the temporary sequence
DROP SEQUENCE temp_seq;
