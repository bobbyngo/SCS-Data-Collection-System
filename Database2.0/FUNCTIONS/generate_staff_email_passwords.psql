--Generate random email and password for clint using role_id and site_id
CREATE OR REPLACE FUNCTION site_schema."site_schema.generate_staff_email_passwords"(role_id integer, site_id integer DEFAULT NULL)
RETURNS void
LANGUAGE 'plpgsql'  
AS $BODY$
DECLARE
	s_site_id integer := site_id;
    s_role_id integer := role_id;
    staff_record RECORD;
    new_email TEXT;
    new_password TEXT;
    email_domain TEXT := '@example.com';
    password_characters TEXT := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    password_length INT := 5; -- length of the password
BEGIN
    FOR staff_record IN
        SELECT s.site_id, s.staff_id, r.role_name
        FROM site_schema.staffs s
        JOIN site_schema.roles r ON s.role_id = r.role_id
        WHERE (s.site_id = s_site_id OR s_site_id IS NULL)
          AND s.role_id = s_role_id
    LOOP
        -- Generate new email incorporating the role
        new_email := 'staff_' || staff_record.role_name || '_' || staff_record.staff_id || email_domain;

        -- Generate new password
        new_password := '';
        FOR i IN 1..password_length LOOP
            new_password := new_password || substr(password_characters, (random() * (length(password_characters) - 1) + 1)::INTEGER, 1);
        END LOOP;
        new_password := md5(new_password); -- Hash the password,
        -- Update staff record with new email and password hash
        UPDATE site_schema.staffs
        SET email = new_email, password_hash = new_password
        WHERE staff_id = staff_record.staff_id;
    END LOOP;
END;
$BODY$

